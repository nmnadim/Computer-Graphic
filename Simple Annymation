#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <math.h>

#include <stdlib.h>
void circle(GLfloat rx,GLfloat ry,GLfloat cx,GLfloat cy){

    glBegin(GL_TRIANGLE_FAN);

  for(int i=0;i<=100;i++){

  float angle=2*3.1416*i/100;

  float x=rx*cosf(angle);
  float y=ry*sinf(angle);
  glVertex2f(x+cx,y+cy);

}
  glEnd();
}

void display();
void reshape(int,int);
void timer(int);
/* GLUT callback Handlers */
void init()
{
    glClearColor(1.0,1.0,1.0,1.0);
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowPosition(200,100);
    glutInitWindowSize(500,500);



    glutCreateWindow("Animation Windows");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutTimerFunc(1000,timer,0);
    init();
    glutMainLoop();
}

float x_position = -10.0;
int state = 1;
 void display(void)
{


    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();
    //draw

    glBegin(GL_POLYGON);
    glColor3f(1.0,0.0,0.0);
    glVertex2f(x_position,1.0);
    glVertex2f(x_position,-1.0);
    glVertex2f(x_position+2.0,-1.0);
    glVertex2f(x_position+2.0,1.0);



    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(1.0,0.0,0.0);
    glVertex2f(x_position,2.0);
    glVertex2f(x_position+2.0,2.0);
    glVertex2f(x_position+1.0,3.0);
    glEnd();

    glColor3f(0.0,0.0,0.0);
    circle(1,1,x_position+1,5);

    glutSwapBuffers();
}

void reshape(int w,int h)
{
    glViewport(0,0,(GLsizei)w,(GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-10,10,-10,10);
    glMatrixMode(GL_MODELVIEW);

}
void timer(int)
{
    glutPostRedisplay();
    glutTimerFunc(1000/60,timer,0);

    switch(state)
    {
    case 1:
        if(x_position<8)
            x_position+=0.10;
    else
        state = -1;
        break;
 case -1:
        if(x_position>-10)
            x_position-=20;
        else
            state = 1;
        break;
    }

}
