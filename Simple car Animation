#include <GL/gl.h>
#include <GL/glut.h>
#include <math.h>

void circle(GLfloat rx,GLfloat ry,GLfloat cx,GLfloat cy){

    glBegin(GL_TRIANGLE_FAN);

 for(int i=0;i<=100;i++){

 float angle=2*3.1416*i/100;

 float x=rx*cosf(angle);
 float y=ry*sinf(angle);
 glVertex2f(x+cx,y+cy);

}
  glEnd();
}
void display();
void reshape(int,int);
void timer(int);
void timer1(int);
/* GLUT callback Handlers */
void init()
{
    glClearColor(1.0,1.0,1.0,1.0);
}
int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowPosition(200,100);
    glutInitWindowSize(500,500);



    glutCreateWindow("Animation Windows");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutTimerFunc(1000,timer,0);
    glutTimerFunc(1000,timer1,0);
    init();
    glutMainLoop();
}
float x_position = 0;
float x1_position = 0;
int state = 1;

void display(void)
{

glClear (GL_COLOR_BUFFER_BIT);

//road
glBegin(GL_QUADS);
glColor3ub(156, 157, 159);
glVertex2f(0,0);
glVertex2f(100,0);
glVertex2f(100,35);
glVertex2f(0,35);
glEnd();
//road line
glLineWidth(5);
glColor3ub(255,255,255);
glBegin(GL_LINES);
glVertex2f(0,5);
glVertex2f(5,5);

glVertex2f(10,5);
glVertex2f(15,5);

glVertex2f(20,5);
glVertex2f(25,5);

glVertex2f(30,5);
glVertex2f(35,5);

glVertex2f(40,5);
glVertex2f(45,5);

glVertex2f(50,5);
glVertex2f(55,5);

glVertex2f(60,5);
glVertex2f(65,5);

glVertex2f(70,5);
glVertex2f(75,5);

glVertex2f(80,5);
glVertex2f(85,5);

glVertex2f(90,5);
glVertex2f(95,5);

glEnd();
//second part of road
glLineWidth(5);
glColor3ub(255,255,255);
glBegin(GL_LINES);
glVertex2f(0,15);
glVertex2f(100,15);

glVertex2f(0,22);
glVertex2f(5,22);

glVertex2f(10,22);
glVertex2f(15,22);

glVertex2f(20,22);
glVertex2f(25,22);

glVertex2f(30,22);
glVertex2f(35,22);

glVertex2f(40,22);
glVertex2f(45,22);

glVertex2f(50,22);
glVertex2f(55,22);

glVertex2f(60,22);
glVertex2f(65,22);

glVertex2f(70,22);
glVertex2f(75,22);

glVertex2f(80,22);
glVertex2f(85,22);

glVertex2f(90,22);
glVertex2f(95,22);
glEnd();



//car
glBegin(GL_POLYGON);
glColor3ub(255,255,0);
glVertex2f(x_position+5,5);
glVertex2f(x_position+32,5);
glVertex2f(x_position+32,11);
glVertex2f(x_position+25,15);
glVertex2f(x_position+5,15);
glEnd();
//
glBegin(GL_QUADS);
glColor3ub(255,255,0);
glVertex2f(x_position+5,5);
glVertex2f(x_position+25,5);
glVertex2f(x_position+25,17);
glVertex2f(x_position+5,17);
glEnd();
//
glBegin(GL_QUADS);
glColor3ub(0,255,0);
glVertex2f(x_position+6,12);
glVertex2f(x_position+9,12);
glVertex2f(x_position+9,15);
glVertex2f(x_position+6,15);

glColor3ub(0,255,0);
glVertex2f(x_position+10,12);
glVertex2f(x_position+13,12);
glVertex2f(x_position+13,15);
glVertex2f(x_position+10,15);

glColor3ub(0,255,0);
glVertex2f(x_position+14,12);
glVertex2f(x_position+17,12);
glVertex2f(x_position+17,15);
glVertex2f(x_position+14,15);

glColor3ub(0,255,0);
glVertex2f(x_position+18,12);
glVertex2f(x_position+21,12);
glVertex2f(x_position+21,15);
glVertex2f(x_position+18,15);

glColor3ub(0,255,0);
glVertex2f(x_position+22,12);
glVertex2f(x_position+25,12);
glVertex2f(x_position+25,15);
glVertex2f(x_position+22,15);

glColor3ub(0,0,0);
glVertex2f(x_position+5,10);
glVertex2f(x_position+24,10);
glVertex2f(x_position+24,11);
glVertex2f(x_position+5,11);
glEnd();

glColor3f(0.0,0.0,0.0);
circle(3,1.5,x_position+10,5);
glColor3f(0.0,0.0,0.0);
circle(3,1.5,x_position+26,5);

glColor3f(1.0,1.0,1.0);
circle(1,0.5,x_position+10,5);
glColor3f(1.0,1.0,1.0);
circle(1,0.5,x_position+26,5);

//Second car drawing
glBegin(GL_QUADS);
glColor3ub(0,0,255);
glVertex2f(x_position+5,20);
glVertex2f(x_position+45,20);
glVertex2f(x_position+45,30);
glVertex2f(x_position+5,30);

glColor3ub(0,255,255);
glVertex2f(x_position+5,25);
glVertex2f(x_position+45,25);
glVertex2f(x_position+45,30);
glVertex2f(x_position+5,30);

glColor3ub(255,0,0);
glVertex2f(x_position+5,25);
glVertex2f(x_position+45,25);
glVertex2f(x_position+45,26);
glVertex2f(x_position+5,26);



glEnd();
glLineWidth(3);
glColor3ub(0,0,0);
glBegin(GL_LINES);
glVertex2f(x_position+5,26);
glVertex2f(x_position+45,26);

glVertex2f(x_position+12,26);
glVertex2f(x_position+12,30);

glVertex2f(x_position+22,26);
glVertex2f(x_position+22,30);

glVertex2f(x_position+35,26);
glVertex2f(x_position+35,30);

glVertex2f(x_position+5,30);
glVertex2f(x_position+51,30);

glVertex2f(x_position+5,26);
glVertex2f(x_position+5,30);
glEnd();
glLineWidth(2);
glColor3ub(0,0,0);
glBegin(GL_LINES);
glVertex2f(x_position+14,20);
glVertex2f(x_position+14,25);

glVertex2f(x_position+25,20);
glVertex2f(x_position+25,25);

glVertex2f(x_position+35,20);
glVertex2f(x_position+35,25);
glEnd();

//bus glass
glBegin(GL_QUADS);
glColor3ub(255,255,255);
glVertex2f(x_position+50,28);
glVertex2f(x_position+57,28);
glVertex2f(x_position+57,29);
glVertex2f(x_position+50,29);

glColor3ub(255,255,255);
glVertex2f(x_position+59,26);
glVertex2f(x_position+61,28);
glVertex2f(x_position+56,30);
glVertex2f(x_position+54,28);
glEnd();
//Front of the bus
glBegin(GL_POLYGON);
glColor3ub(0,0,255);
glVertex2f(x_position+45,20);
glVertex2f(x_position+55,20);
glVertex2f(x_position+55,25);
glVertex2f(x_position+51,30);
glVertex2f(x_position+45,30);
glEnd();


//bus door
glBegin(GL_QUADS);
glColor3ub(0,0,0);
glVertex2f(x_position+45,20);
glVertex2f(x_position+50,20);
glVertex2f(x_position+50,27);
glVertex2f(x_position+45,27);
glEnd();
//door in
glBegin(GL_POLYGON);
glColor3ub(255,255,255);
glVertex2f(x_position+45,20);
glVertex2f(x_position+48,21);
glVertex2f(x_position+48,26);
glVertex2f(x_position+45,27);

glEnd();

//care chaka
glColor3f(0.0,0.0,0.0);
circle(3,1.5,x_position+15,20);
glColor3f(1.0,1.0,1.0);
circle(1,0.5,x_position+15,20);
//care chaka front
glColor3f(0.0,0.0,0.0);
circle(3,1.5,x_position+42,20);
glColor3f(1.0,1.0,1.0);
circle(1,0.5,x_position+42,20);


//bus door
glBegin(GL_QUADS);
glColor3ub(0,0,0);
glVertex2f(x1_position+100,20);
glVertex2f(x1_position+100,25);
glVertex2f(x1_position+95,25);
glVertex2f(x1_position+95,20);
glEnd();

glutSwapBuffers();
}
void reshape(int w,int h)
{
    glViewport(0,0,(GLsizei)w,(GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,100,0,50);
    glMatrixMode(GL_MODELVIEW);

}
void timer(int)
{
    glutPostRedisplay();
    glutTimerFunc(1000/60,timer,0);

    switch(state)
    {
    case 1:
        if(x_position<100)
            x_position+=0.10;
    else
        state = -1;
        break;
 case -1:
        if(x_position>-10)
            x_position-=20;
        else
            state = 1;
        break;
    }

}

void timer1(int)
{
    glutPostRedisplay();
    glutTimerFunc(1000/60,timer1,0);

    switch(state)
    {
    case 1:
        if(x1_position<100)
            x1_position-=10;
    else
        state = -1;
        break;
    case -1:
        if(x1_position>+10)
            x1_position+=20;
        else
            state = 1;
        break;

    }

}

