#include<windows.h>
#ifdef APPLE
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>


#include <GL/gl.h>
#include <GL/glut.h>
#include <math.h>


void circle(GLfloat rx,GLfloat ry,GLfloat cx,GLfloat cy){

    glBegin(GL_TRIANGLE_FAN);

  for(int i=0;i<=100;i++){

  float angle=2*3.1416*i/100;

  float x=rx*cosf(angle);
  float y=ry*sinf(angle);
  glVertex2f(x+cx,y+cy);

}
  glEnd();
}

void display(void)
{
/* clear all pixels */
glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/

  // x axis
glColor3ub(9, 252, 5 );
glBegin(GL_LINES);
glVertex3f(-1.0,0.0,0.0);
glVertex3f(1.0,0.0,0.0);
glEnd();


//y axis
glColor3ub(9, 252, 5 );
glBegin(GL_LINES);
glVertex3f(0.0,-1.0,0.0);
glVertex3f(0.0,1.0,0.0);
glEnd();

//points

glColor3f(11,233,0);
glPointSize(5);
glBegin(GL_POINTS);
glVertex3f(0.0,0.0,0.0);

glEnd();

//triangle

glBegin(GL_TRIANGLES);
glColor3ub(250, 61, 21);
glVertex3f(0.1, 0.1, 0.0);
glVertex3f(0.3, 0.1, 0.0);
glVertex3f(0.2, 0.3, 0.0);
glEnd();


glBegin(GL_QUADS);
//square
glColor3ub(250, 61, 21);
glVertex3f(0.4,0.1,0.0);
glVertex3f(0.6,0.1,0.0);
glVertex3f(0.6,0.3,0.0);
glVertex3f(0.4,0.3,0.0);

//rectangle
glColor3ub(250, 61, 21);
glVertex3f(0.7,0.1,0.0);
glVertex3f(0.9,0.1,0.0);
glVertex3f(0.9,0.2,0.0);
glVertex3f(0.7,0.2,0.0);

//trapezoid
glColor3ub(250, 61, 21);
glVertex3f(0.1,0.4,0.0);
glVertex3f(0.5,0.4,0.0);
glVertex3f(0.3,0.6,0.0);
glVertex3f(0.1,0.6,0.0);

//diamond
glColor3ub(21, 45, 250 );
glVertex3f(0.6,-0.1,0.0);
glVertex3f(0.5,-0.2,0.0);
glVertex3f(0.6,-0.3,0.0);
glVertex3f(0.7,-0.2,0.0);

glEnd();
glBegin(GL_POLYGON);

//Octagon
glColor3ub(226, 247, 10);
glVertex3f(0.2,-0.1,0.0);
glVertex3f(0.3,-0.1,0.0);
glVertex3f(0.4,-0.2,0.0);
glVertex3f(0.4,-0.3,0.0);
glVertex3f(0.3,-0.4,0.0);
glVertex3f(0.2,-0.4,0.0);
glVertex3f(0.1,-0.3,0.0);
glVertex3f(0.1,-0.2,0.0);
glEnd();

glBegin(GL_POLYGON);

//Hexagon
glColor3ub(10, 247, 31);
glVertex3f(-0.3,-0.1,0.0);
glVertex3f(-0.2,-0.1,0.0);
glVertex3f(-0.1,-0.2,0.0);
glVertex3f(-0.2,-0.3,0.0);
glVertex3f(-0.3,-0.3,0.0);
glVertex3f(-0.4,-0.2,0.0);
glEnd();

glBegin(GL_POLYGON);

//Pentagon
glColor3ub(247, 31, 10);
glVertex3f(-0.6,-0.1,0.0);
glVertex3f(-0.5,-0.2,0.0);
glVertex3f(-0.55,-0.3,0.0);
glVertex3f(-0.65,-0.3,0.0);
glVertex3f(-0.7,-0.2,0.0);
glEnd();

//circle
glColor3f(1.0,1.0,1.0);
circle(0.2,0.2,-0.3,0.3);

//half-moon
glColor3f(1.0,1.0,1.0);
circle(0.2,0.2,-0.7,0.7);
glColor3f(0.0,0.0,0.0);
circle(0.2,0.2,-0.6,0.8);

//oval
glColor3f(1.0,1.0,1.0);
circle(0.1,0.2,-0.7,0.290);


//love
glColor3f(1.0,1.0,1.0);
circle(0.1,0.1,0.7,-0.7);
glColor3f(1.0,1.0,1.0);
circle(0.1,0.1,0.55,-0.7);

//love t
glBegin(GL_TRIANGLES);
glColor3ub(1.0,1.0,1.0);
glVertex3f(0.8, -0.7, 0.0);
glVertex3f(0.45, -0.7, 0.0);
glVertex3f(0.6, -0.0, 0.0);
glEnd();







/* don't wait!
* start processing buffered OpenGL routines
*/
glFlush ();
}

/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
glutInit(&argc, argv);
glutCreateWindow ("Basic Shapes");
glutInitWindowSize(700,700);
glutInitWindowPosition (100, 100);
glutDisplayFunc(display);



glutMainLoop();
return 0; /* ISO C requires main to return int. */
}
