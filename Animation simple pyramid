#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <math.h>

#include <stdlib.h>
#include <math.h>

void circle(GLfloat rx,GLfloat ry,GLfloat cx,GLfloat cy){

    glBegin(GL_TRIANGLE_FAN);

  for(int i=0;i<=100;i++){

  float angle=2*3.1416*i/100;

  float x=rx*cosf(angle);
  float y=ry*sinf(angle);
  glVertex2f(x+cx,y+cy);

}
  glEnd();
}


void display();
void reshape(int,int);
void timer(int);
/* GLUT callback Handlers */
void init()
{
    glClearColor(1.0,1.0,1.0,1.0);
}

int main(int argc, char *argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowPosition(200,100);
    glutInitWindowSize(500,500);



    glutCreateWindow("Animation Windows");

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutTimerFunc(1000,timer,0);
    init();
    glutMainLoop();
}

float x_position = 3;
int state = 1;
 void display(void)
{


    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();
//sky
glBegin(GL_QUADS);
glColor3ub(135,206,235);
glVertex2f(0,14);
glVertex2f(0,50);
glVertex2f(50,50);
glVertex2f(50,14);

//base
glColor3ub(177, 146, 126);
glVertex2f(0,14);
glVertex2f(0,0);
glVertex2f(50,0);
glVertex2f(50,14);
glEnd();

//pyramid 1 first triangle

glBegin(GL_TRIANGLES);
glColor3ub(104,65,50);
glVertex2f(31,6);
glVertex2f(41,6);
glVertex2f(36,18);

//second triangle

glColor3ub(157,110,94);
glVertex2f(31,6);
glVertex2f(28,8);
glVertex2f(36,18);
glEnd();

//pyramid 2 first triangle

glBegin(GL_TRIANGLES);
glColor3ub(104,65,50);
glVertex2f(15,4);
glVertex2f(30,4);
glVertex2f(22.5,22.5);

//second triangle

glColor3ub(157,110,94);
glVertex2f(15,4);
glVertex2f(12,8);
glVertex2f(22.5,22.5);
glEnd();

//cloud circle 1
glColor3f(1.0,1.0,1.0);
circle(6,6,35,35);
//cloud circle 2
glColor3f(1.0,1.0,1.0);
circle(5,4,30,35);
//cloud circle 3
glColor3f(1.0,1.0,1.0);
circle(5,4,40,35);
//cloud circle 4
glColor3f(1.0,1.0,1.0);
circle(3,2,27,35);
//cloud circle 5
glColor3f(1.0,1.0,1.0);
circle(3,2,43,35);
// sun circle
glColor3ub( 253, 184, 19);
circle(2,2,x_position,47);

//square
glBegin(GL_QUADS);
glColor3ub(135,206,235);
glVertex2f(20,35.5);
glVertex2f(50,35.5);
glVertex2f(50,28);
glVertex2f(20,28);
glEnd();

//base of the tree
glBegin(GL_QUADS);
glColor3ub(55,46,39);
glVertex2f(40.5,14);
glVertex2f(42.5,14);
glVertex2f(42.5,18);
glVertex2f(40.5,18);

//base of second tree
glColor3ub(55,46,39);
glVertex2f(46.5,14);
glVertex2f(48.5,14);
glVertex2f(48.5,18);
glVertex2f(46.5,18);

//base of 3rd tree
glColor3ub(55,46,39);
glVertex2f(4,14);
glVertex2f(7,14);
glVertex2f(7,18);
glVertex2f(4,18);
//base of 4th tree
glColor3ub(55,46,39);
glVertex2f(11,14);
glVertex2f(14,14);
glVertex2f(14,18);
glVertex2f(11,18);
glEnd();
//triangle for first tree leaf
glBegin(GL_TRIANGLES);
glColor3ub(9,63,16);
glVertex2f(38.5,18);
glVertex2f(41.5,18);
glVertex2f(41.5,24);

glColor3ub(9,94,20);
glVertex2f(44.5,18);
glVertex2f(41.5,18);
glVertex2f(41.5,24);

//second tree leaf
glColor3ub(35,155,86);
glVertex2f(47.5,18);
glVertex2f(45,18);
glVertex2f(47.5,24);

glColor3ub(46,204,113);
glVertex2f(47.5,18);
glVertex2f(50,18);
glVertex2f(47.5,24);

//3rd tree leaf
glColor3ub(10,139,27);
glVertex2f(2,18);
glVertex2f(9,18);
glVertex2f(5.5,24);

glColor3ub(10,139,27);
glVertex2f(2,20);
glVertex2f(9,20);
glVertex2f(5.5,26);
//4th tree leaf
glColor3ub(46,204,113);
glVertex2f(9.5,18);
glVertex2f(15.5,18);
glVertex2f(12.5,24);

glColor3ub(35,155,86);
glVertex2f(9.5,18);
glVertex2f(12.5,18);
glVertex2f(12.5,24);
//4th tree second leaf
glColor3ub(46,204,113);
glVertex2f(9.5,20);
glVertex2f(15.5,20);
glVertex2f(12.5,26);

glColor3ub(35,155,86);
glVertex2f(9.5,20);
glVertex2f(12.5,20);
glVertex2f(12.5,26);
glEnd();



    glutSwapBuffers();
}

void reshape(int w,int h)
{
    glViewport(0,0,(GLsizei)w,(GLsizei)h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,50,0,50);
    glMatrixMode(GL_MODELVIEW);

}
void timer(int)
{
    glutPostRedisplay();
    glutTimerFunc(1000/60,timer,0);

    switch(state)
    {
    case 1:
        if(x_position<48)
            x_position+=0.10;
    else
        state = -1;
        break;
 case -1:
        if(x_position>-10)
            x_position-=30;
        else
            state = 1;
        break;
    }

}
